{"version":3,"sources":["components/ErrorMessage/ErrorMessage.jsx","utils/tokenService.js","utils/userService.js","pages/SignupPage/SignupPage.jsx","pages/LoginPage/LoginPage.jsx","pages/App/App.jsx","serviceWorker.js","index.js"],"names":["ErrorMessage","props","className","error","getToken","token","localStorage","getItem","JSON","parse","atob","split","exp","Date","now","removeItem","setToken","setItem","removeToken","getUserFromToken","user","BASE_URL","signup","fetch","method","body","then","res","ok","json","Error","tokenService","logout","login","creds","headers","Headers","stringify","getUser","getProfile","username","SignUpPage","useState","setError","email","password","passwordConf","state","setState","history","useHistory","handleChange","e","target","name","value","a","key","preventDefault","formData","FormData","append","userService","handleSignUpOrLogin","push","console","log","message","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Form","autoComplete","onSubmit","Segment","stacked","Input","placeholder","onChange","required","type","Button","LoginPage","fluid","size","Message","to","App","setUser","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7b4504d8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function ErrorMessage(props){\n    return <span className={\"error\"}>{props.error}</span>\n}","function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };","import tokenService from './tokenService';\n\nconst BASE_URL = '/api/users/';\n\n\n// NOTE THIS IS configured to send of a multi/part form request\n// aka photo \nfunction signup(user) {\n  return fetch(BASE_URL + 'signup', {\n    method: 'POST',\n    body: user\n  })\n  .then(res => {\n    if (res.ok) return res.json();\n    // Probably a duplicate email\n    throw new Error('Email already taken!');\n  })\n  // Parameter destructuring!\n  .then(({token}) => tokenService.setToken(token));\n  // Setting our token in localStorage in our browser\n  // then we'll be able to use with every request!\n  // The above could have been written as\n  //.then((token) => token.token);\n}\n\nfunction getUser() {\n  return tokenService.getUserFromToken();\n}\n\nfunction logout() {\n  tokenService.removeToken();\n}\n\nfunction login(creds) {\n  return fetch(BASE_URL + 'login', {\n    method: 'POST',\n    headers: new Headers({'Content-Type': 'application/json'}),\n    body: JSON.stringify(creds)\n  })\n  .then(res => {\n    // Valid login if we have a status of 2xx (res.ok)\n    if (res.ok) return res.json();\n    throw new Error('Bad Credentials!');\n  })\n  .then(({token}) => tokenService.setToken(token));\n}\n\nfunction getProfile(username){\n  return fetch(BASE_URL + username, {\n    headers: {\n      'Authorization': 'Bearer ' + tokenService.getToken()\n    }\n  }).then(res => {\n    if(res.ok) return res.json();\n    throw new Error('Bad Credentials')\n  })\n}\nexport default {\n  signup, \n  logout,\n  login,\n  getUser,\n  getProfile\n};","import React, { useState } from 'react';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage';\n\nimport userService from '../../utils/userService';\nimport { useHistory } from 'react-router-dom';\n\nimport {Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\n\n\nexport default function SignUpPage(props){\n\n    const [error, setError] = useState('')\n    const [state, setState] = useState({\n        username: '',\n        email: '',\n        password: '',\n        passwordConf: ''\n    })\n\n    const history = useHistory()\n\n    function handleChange(e){\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    async function handleSubmit(e){\n        e.preventDefault();\n\n        const formData = new FormData();\n\n        for (let key in state) {\n            formData.append(key, state[key])\n        }\n\n        try{\n            await userService.signup(formData);\n            props.handleSignUpOrLogin()\n            history.push('/')\n        } catch(err) {\n            console.log(err.message)\n            setError(err.message)\n        }\n    }\n \n    \n    return (\n\n        <Grid textAlign='center' style={{height:'100vh'}} verticalAlign='middle'>\n            <Grid.Column style={{maxWidth: 300 }}>\n                <Header as='h2' color='#a30f4d' textAlign='center'>\n                    Sign Up\n                </Header>\n                <Form autoComplete='off' onSubmit={handleSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            name=\"username\"\n                            placeholder='User Name'\n                            value={state.username}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            name='password'\n                            type='password'\n                            placeholder='password'\n                            value={state.password}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            name='passwordConf'\n                            type='password'\n                            placeholder='Confirm Password'\n                            value={state.passwordConf}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Button\n                            type='submit'\n                            className='btn'\n                        >Sign Up</Button>\n                    </Segment>\n                    {error ? <ErrorMessage error={error}/> : null}\n                </Form>\n            </Grid.Column>\n        </Grid>        \n\n      );   \n    \n}\n","import React, { useState } from 'react';\nimport './LoginPage.css';\nimport ErrorMessage from '../../components/ErrorMessage/ErrorMessage'\nimport userService from '../../utils/userService';\nimport {Button, Form, Grid, Header, Message, Segment} from 'semantic-ui-react';\nimport { useHistory } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nexport default function LoginPage(props){\n    const [error, setError] = useState(\"\");\n    const [state, setState] = useState({\n        email:\"\",\n        password: \"\",\n    });\n\n    const history = useHistory();\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value,\n        });\n    }\n\n    async function handleSubmit(e) {\n        e.preventDefault();\n\n        try {\n            await userService.login(state);\n            props.handleSignUpOrLogin();\n            history.push('/');\n        } catch(err) {\n            setError(err.message);\n        }\n    }\n\n    return (\n        <Grid textAlign='center' style={{height:'100vh'}} verticalAlign=\"middle\">\n            <Grid.Column style={{maxWidth: 300}}>\n                <Header as='h2' color=\"#a30f4d\" textAlign='center'>\n                    Log-In to Your Account\n                </Header>\n                <Form autoComplete='off' onSubmit={handleSubmit}>\n                    <Segment stacked>\n                        <Form.Input\n                            type='email'\n                            name='email'\n                            placeholder='email'\n                            value={state.email}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Form.Input\n                            type='password'\n                            name='password'\n                            placeholder='password'\n                            value={state.password}\n                            onChange={handleChange}\n                            required\n                        />\n                        <Button\n                            color='#a30f4d'\n                            fluid\n                            size='large'\n                            type='submit'\n                            className='btn'\n                        >LogIn</Button>\n                    </Segment>\n                </Form>\n                <Message>\n                    New to us? <Link to='/signup'>Sign Up</Link>\n                </Message>\n                {error ? <ErrorMessage error={error} /> : null}\n            </Grid.Column>\n        </Grid>\n      );\n}\n\n","import React, {useState} from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport SignupPage from '../SignupPage/SignupPage';\nimport LoginPage from '../LoginPage/LoginPage';\nimport userService from '../../utils/userService'\n\n\nfunction App() {\n\n  const [user, setUser] = useState(userService.getUser()) // getUser decodes our JWT token, into a javascript object\n  // this object corresponds to the jwt payload which is defined in the server signup or login function that looks like \n  // this  const token = createJWT(user); // where user was the document we created from mongo\n\n  function handleSignUpOrLogin(){\n    setUser(userService.getUser()) // getting the user from localstorage decoding the jwt\n  }\n\n  function handleLogout(){\n    userService.logout();\n    setUser({user: null})\n  }\n\n  return (\n    <div className=\"App\">\n      <Switch>\n          <Route exact path=\"/login\">\n             <LoginPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          <Route exact path=\"/signup\">\n             <SignupPage handleSignUpOrLogin={handleSignUpOrLogin}/>\n          </Route>\n          {userService.getUser() ? (\n             <Switch>\n                <Route exact path=\"/\">\n                    Home PAGE COMPONENT WOULD GO HEREE\n                </Route>\n            </Switch>\n           ) : (\n            <Redirect to='/login'/>\n           )}\n  \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <Router><App/></Router>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}